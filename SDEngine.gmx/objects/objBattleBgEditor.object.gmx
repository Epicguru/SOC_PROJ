<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11110</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ly[1] = instance_create(0,0,objBattleBackground) 
with ly[1] {
    effect = 0
    frequency = global.battle_bg[0,2];
    phaserate = global.battle_bg[0,3];
    amplitude = global.battle_bg[0,4];
    alpha = global.battle_bg[0,5];
    speedx = global.battle_bg[0,6];
    speedy = global.battle_bg[0,7];
    depth = 1000
    back = global.battle_bg[0,0]
}

ly[2] = instance_create(0,0,objBattleBackground) 
with ly[2] {
    effect = 0
    frequency = 0
    phaserate = 0
    amplitude = 0
    alpha = 0
    depth = 999
    back = global.battle_bg[0,0]
}

ly[3] = instance_create(0,0,objBattleBackground) 
with ly[3] {
    effect = 0
    frequency = 0
    phaserate = 0
    amplitude = 0
    alpha = 0
    depth = 999
    back = global.battle_bg[0,0]
}

layer = 1

_x[1] = 0
_x[2] = 152
_x[3] = 304
_y[1] = 6
_y[2] = 20
_y[3] = 206
_y[4] = 220

cursor_x = _x[1];
cursor_y = _y[1];
cursor_image_index = 0;
cursor_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if keyboard_check_pressed(vk_down) {
        if cursor_y = _y[1] { cursor_y = _y[2] }
        else if cursor_y = _y[2] { cursor_y = _y[3] }
        else if cursor_y = _y[3] { cursor_y = _y[4] }
        else if cursor_y = _y[4] { cursor_y = _y[1] }
    } else if keyboard_check_pressed(vk_up) {
        if cursor_y = _y[1] { cursor_y = _y[4] }
        else if cursor_y = _y[2] { cursor_y = _y[1] }
        else if cursor_y = _y[3] { cursor_y = _y[2] }
        else if cursor_y = _y[4] { cursor_y = _y[3] }
    } else if keyboard_check_pressed(vk_right) {
        if cursor_x = _x[1] { cursor_x = _x[2] }
        else if cursor_x = _x[2] { cursor_x = _x[3] }
        else if cursor_x = _x[3] { cursor_x = _x[1] }
    } else if keyboard_check_pressed(vk_left){
        if cursor_x = _x[1] { cursor_x = _x[3] }
        else if cursor_x = _x[2]  { cursor_x = _x[1] }
        else if cursor_x = _x[3] { cursor_x = _x[2] }
    }
    
    
    
    if keyboard_check(vk_control) {
        if cursor_y = _y[1]{
            if cursor_x = _x[1] {
                ly[layer].frequency -= 0.1
            } else if cursor_x = _x[2] {
                ly[layer].amplitude -= 0.1
            } else {
                ly[layer].speedx -= 0.01
            }
        } else if cursor_y = _y[2]{
            if cursor_x = _x[1] {
                ly[layer].phaserate -= 0.1
            } else if cursor_x = _x[2] {
                ly[layer].alpha -= 0.01
            } else {
                ly[layer].speedy -= 0.01
            }
        }
    } else if keyboard_check(vk_alt) {
        if cursor_y = _y[1]{
            if cursor_x = _x[1] {
                ly[layer].frequency += 0.1
            } else if cursor_x = _x[2] {
                ly[layer].amplitude += 0.1
            } else {
                ly[layer].speedx += 0.01
            }
        } else if cursor_y = _y[2]{
            if cursor_x = _x[1] {
                ly[layer].phaserate += 0.1
            } else if cursor_x = _x[2] {
                ly[layer].alpha += 0.01
            } else {
                ly[layer].speedy += 0.01
            }
        }
    }
    
    if keyboard_check_pressed(vk_control) {
        if cursor_y = _y[3]{
            if cursor_x = _x[1] {
                if layer &gt; 1 { layer-- }
            } else {
                if  ly[layer].bgg&gt;0 {
                    if ly[layer].custom {
                        sprite_delete(ly[layer].back)
                        ly[layer].custom = 0
                    }
                    ly[layer].bgg--
                    ly[layer].back = global.battle_bg[ly[layer].bgg,0]
                }
            }
        } else if cursor_y = _y[4]{
            if cursor_x = _x[1] {
                if ly[layer].effect &gt; 0 {
                    ly[layer].effect--
                }
            } else {
                //Something else could go here
            }
        }
    } else if keyboard_check_pressed(vk_alt) {
        if cursor_y = _y[3]{
            if cursor_x = _x[1] {
                if layer &lt; 3 { layer++ }
            } else {
                //if ly[layer].bgg&lt;=array_length_1d(global.battle_bg) {
                    if ly[layer].custom {
                        sprite_delete(ly[layer].back)
                        ly[layer].custom = 0
                    }
                    ly[layer].bgg++
                    ly[layer].back = global.battle_bg[ly[layer].bgg,0]
                //}
            }
        } else if cursor_y = _y[4]{
            if cursor_x = _x[1] {
                if ly[layer].effect &lt; 3 {
                    ly[layer].effect++
                }
            } else {
                //Something else could go here
            }
        }
    }
    
    if keyboard_check_pressed(global.kb_enter) {
        ly[layer].amplitude = 0
        ly[layer].phaserate = 0
        ly[layer].frequency = 0
        ly[layer].alpha = 1
        ly[layer].speedx = 0
        ly[layer].speedy = 0
    }
    
    if keyboard_check_pressed(ord("C")) {
        clipboard_set_text(
            "AMP: "   + string(ly[layer].amplitude) +" / "+
            "PHASE: " + string(ly[layer].phaserate) +" / "+
            "FREQ: "  + string(ly[layer].frequency) +" / "+
            "ALPHA: " + string(ly[layer].alpha) +" / "+
            "SPDX: "  + string(ly[layer].speedx) +" / "+
            "SPDY: "  + string(ly[layer].speedy) +" / "+
            "FX: "    + string(ly[layer].effect) +" / "+
            "BG: "    + sprite_get_name(global.battle_bg[ly[layer].bgg,0])
        )
    }
    
    if keyboard_check_pressed(ord("L")) {
        if ly[layer].custom {
            sprite_delete(ly[layer].back)
        }
        ly[layer].back = sprite_add(get_open_filename("PNG File|*.png", ""),0,0,0,0,0)
        ly[layer].custom = 1
    }
    
    cursor_timer +=0.25
    
    if cursor_timer = 1
    {
    cursor_image_index +=1
    cursor_timer = 0
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(ly[1].back) { sprite_delete(ly[1].back) }
if sprite_exists(ly[2].back) { sprite_delete(ly[2].back) }
if sprite_exists(ly[3].back) { sprite_delete(ly[3].back) }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var k;
switch ly[layer].effect {
    case 0: k = "Sine"; break;
    case 1: k = "Vert. Compression"; break;
    case 2: k = "Horz. Compression"; break;
    case 3: k = "Sine + Vert. Compression"; break;
}
draw_set_halign(fa_left)
draw_set_font(global.thenfont)
draw_set_color(c_black)
draw_rectangle(0,0,426,32,c_black)
draw_rectangle(0,208,426,240,c_black)
draw_set_color(c_white)
draw_text(8,6,
    "Frequency: "+string(ly[layer].frequency)+"#"+
    "Phaserate: "+string(ly[layer].phaserate)
)
draw_text(160,6,
    "Amplitude: "+string(ly[layer].amplitude)+"#"+
    "Alpha: "+string(ly[layer].alpha)
)
draw_text(312,6,
    "Horz. speed: "+string(ly[layer].speedx)+"#"+
    "Vert. speed: "+string(ly[layer].speedy)
)
draw_text(8,206,
    "Layer: "+string(layer)+"#"+
    "Effect: "+k
)
draw_text(160,206, 
    "Background: "+sprite_get_name(global.battle_bg[ly[layer].bgg,0])+"#"+
    "ENTER: Reset. C: Copy data. L: Load image"
)

draw_sprite(spr_cursor,cursor_image_index,cursor_x+8,cursor_y+8)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
