<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000020</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>filter = 0
device  = joy_count()-1;
event_user(0);
pixel = shader_get_uniform(shPixel,"pixel");
pixelsize = 1

ini_open(global.config_fname)
scale = ini_read_real("Settings","scale",1);
ini_close()

window_resize_and_center(scale)

alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_center()

ini_open(global.config_fname)
ini_write_real("Settings","scale",scale);
ini_close()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*joy_update();

if joy_button(device, global.gamepad_choose) {
    keyboard_key_press(global.kb_choose)
} else if joy_button(device, global.gamepad_back) {
    keyboard_key_press(global.kb_back)
} else if joy_button(device, global.gamepad_enter) {
    keyboard_key_press(global.kb_enter)
} else if joy_button(device, global.gamepad_map) {
    keyboard_key_press(global.kb_map)
} else if joy_button(device, global.gamepad_q) {
    keyboard_key_press(global.kb_q)
} else if joy_button(device, global.gamepad_w) {
    keyboard_key_press(global.kb_w)
} 

if joy_released(device, global.gamepad_choose) {
    keyboard_key_release(global.kb_choose)
} else if joy_released(device, global.gamepad_back) {
    keyboard_key_release(global.kb_back)
} else if joy_released(device, global.gamepad_enter) {
    keyboard_key_release(global.kb_enter)
} else if joy_released(device, global.gamepad_map) {
    keyboard_key_release(global.kb_map)
} else if joy_released(device, global.gamepad_q) {
    keyboard_key_release(global.kb_q)
} else if joy_released(device, global.gamepad_w) {
    keyboard_key_release(global.kb_w)
} 

if joy_count() &gt; 0 {
    if instance_exists(objButterflyGet) or instance_exists(objTextBox) 
    or instance_exists(objPause) or instance_exists(obj_inv) 
    or instance_exists(objStorage) or instance_exists(objGoodNight) 
    or instance_exists(objQuestion) or instance_exists(objShop) or instance_exists(objMapDisplay) 
    or instance_exists(objATMDisplay) or instance_exists(objBattleMsg) or global.cutscene 
    or room = rmMenu or room = rmControls or room = rmNewGame or room = rmBattle or room = rmBgTest or room = rmNaming {
        if joy_axis(device,0) &gt; 0.5 {
            keyboard_key_press(vk_right)
            keyboard_key_release(vk_left)
        } else if joy_axis(device,0) &lt; -0.5 {
            keyboard_key_press(vk_left)
            keyboard_key_release(vk_right)
        } else {
            keyboard_key_release(vk_left)
            keyboard_key_release(vk_right)
        }
        
        if joy_axis(device,1) &gt; 0.5 {
            keyboard_key_press(vk_down)
            keyboard_key_release(vk_up)
        } else if joy_axis(device,1) &lt; -0.5 {
            keyboard_key_press(vk_up)
            keyboard_key_release(vk_down)
        } else {
            keyboard_key_release(vk_down)
            keyboard_key_release(vk_up)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>axes = joy_axes(device);
buttons = joy_buttons(device);
hats = joy_hats(device);
balls = joy_balls(device);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>end_inventory()
ds_list_destroy(global.datalist)
ds_map_destroy(global.presents)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the application surface, filtering, and fading

draw_enable_alphablend(0)
if filter = 0 {
    //No Filter
    if !window_get_fullscreen() {
        draw_surface_stretched(application_surface,0,0,view_wview[0]*scale,view_hview[0]*scale)
    } else {
        draw_surface_stretched(application_surface,0,0,display_get_width(),display_get_height())
    }
} else if filter = 1 {
    //Pixel Filter
    shader_set(shPixel)
    shader_set_uniform_f(pixel,view_wview[0]*3,view_hview[0]*3,pixelsize,pixelsize)//background width,background height,pixel width,pixel height
    if !window_get_fullscreen() {
        draw_surface_stretched(application_surface,0,0,view_wview[0]*scale,view_hview[0]*scale)
    } else {
        draw_surface_stretched(application_surface,0,0,display_get_width(),display_get_height())
    }
    shader_reset()
}
draw_enable_alphablend(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_direct(vk_lalt) {
    game_end();
} else {
    if window_get_fullscreen() {
        window_set_fullscreen(false);
    } else {
        window_set_fullscreen(true);
    }
    display_set_gui_maximise();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen() or objDebug.active { exit }

scale = 3
window_resize_and_center(scale)
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen() or objDebug.active { exit }

scale = 2
window_resize_and_center(scale)
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen() or objDebug.active { exit }

scale = 1
window_resize_and_center(scale)

alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
